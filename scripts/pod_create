#!/bin/bash -eu

function usage
{
	cat <<END
Usage: $0 [-c CPU_REQUEST] [-C CPU_LIMIT] [-m MEMORY_REQUEST] [-M MEMORY_LIMIT] [-i IMAGE] [ -l LOGDIR ] [ -n POD_NAME ] [ -w WORKDIR ] [ -p POD_PREFIX ] COMMAND
Options:
	-c CPU_REQUEST		The kubernetes CPU request. Default: 900m (90% of one core, to
				allow some room for omnipresent tiny kube services)
	-C CPU_LIMIT		The kubernetes CPU limit. Default: 1000m (100% of one core, to
				cap the resources consumed by the pod at one core)
	-m MEMORY_REQUEST	The kubernetes memory request. Default: 2Gi (2048 megabytes)
	-M MEMORY_LIMIT		The kubernetes memory limit. Default: 4Gi (4096 megabytes)
	-N 			Don't mount an NFS share in /shared.
	-P 			Make the pod privileged (unless your credentials forbid it).
	-i IMAGE		The Docker image to pull.
	-l LOGDIR		A directory to check for completion logs of pods. If a log is found
				for a pod, the pod will not be created. Eases re-running missing
				parts of large experiments.
	-e ENV_VAR 		Specify value of environment variable that is required to be accessed
				inside the pod. By default, the environment variable that will be set 
				is BIN_NAME.
	-n POD_NAME		The name of the pod. If not provided, this will be automatically
				generated from the given command.
	-w WORKDIR		A temporary directory to create the yml files describing the pods.
				If not specified, /tmp/workbench will be used.
	-p POD_PREFIX		A string to prefix the pod names. Makes mass-scheduling different
				parts of an experiment easier.
	COMMAND			The command to run in the dockerfile.

All options can also be specified via environment variables (i.e.: POD_PREFIX=mypods ./pod_create echo hello).
END
}

LOGDIR=${LOGDIR-}
NFS=${NFS-}
IMAGE=${IMAGE-ubuntu}
CPU_REQUEST=${CPU_REQUEST:-900m}
CPU_LIMIT=${CPU_LIMIT:-1000m}
MEMORY_REQUEST=${MEMORY_REQUEST:-2Gi}
MEMORY_LIMIT=${MEMORY_LIMIT:-4Gi}
POD_NAME=${POD_NAME-}
POD_PREFIX=${POD_PREFIX-}
WORKDIR=${WORKDIR-}
NONFS=${NONFS:-0}
ENV_VAR=${ENV_VAR:-}
PRIVILEGED=false

while getopts "c:C:m:M:l:n:e:i:w:p:NP" OPT
do
	case $OPT in
		c)
			CPU_REQUEST=$OPTARG
			;;
		C)
			CPU_LIMIT=$OPTARG
			;;
		m)
			MEMORY_REQUEST=$OPTARG
			;;
		M)
			MEMORY_LIMIT=$OPTARG
			;;
		i)
			IMAGE=$OPTARG
			;;
		l)
			LOGDIR=$OPTARG
			;;
		N)
			NONFS=1
			;;
		P)
			PRIVILEGED=true
			;;
		n)
			POD_NAME=$OPTARG
			;;
		p)
			POD_PREFIX=$OPTARG
			;;
		w)
			WORKDIR=$OPTARG
			;;
		e) 
			ENV_VAR=$OPTARG
                        ;;
		*)
			usage
			exit 0
			;;
	esac
done

WORKDIR=${WORKDIR:-/tmp/workbench}
mkdir -p $WORKDIR

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
shift $(($OPTIND-1))
POD_CMD="$@"
POD_NAME=$($SCRIPT_DIR/name_pod -p "$POD_PREFIX" -n "$POD_NAME" "$@")

if [ -n "$LOGDIR" -a -f $LOGDIR/$POD_NAME ]
then
	echo "[*] Skipping $POD_NAME creation because the completion log is already there."
	exit
fi

mkdir -p $WORKDIR/pods
PODPATH=$WORKDIR/pods/$POD_NAME.yml

cat <<END >$PODPATH
apiVersion: v1
kind: Pod
metadata:
  name: $POD_NAME
spec:
  containers:
    - name: $POD_NAME
      command:
        - "/bin/bash"
        - "-c"
        - "$POD_CMD"
      image: $IMAGE
      imagePullPolicy: Always
      stdin: true
      tty: true
      env:
        - name: BIN_NAME
          value: $ENV_VAR
      volumeMounts:
        - name: shared
          mountPath: "/shared"
      resources:
        limits:
          cpu: $CPU_LIMIT
          memory: $MEMORY_LIMIT
        requests:
          cpu: $CPU_REQUEST
          memory: $MEMORY_REQUEST
      securityContext:
        privileged: $PRIVILEGED
  restartPolicy: Never
  imagePullSecrets:
    - name: docker-secret
  volumes:
  - name: shared
END

if [ "$NONFS" -ne 1 ]
then
	cat <<END >>$PODPATH
    persistentVolumeClaim:
      claimName: nfs
END
else
	cat <<END >>$PODPATH
    emptyDir: {}
END
fi

kubectl create -f $PODPATH
